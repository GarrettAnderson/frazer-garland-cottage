type Project {
  id: ID!
  name: String!
  tasks(filter: ModelTaskFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelTaskConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Task {
  id: ID!
  title: String!
  desc: Project
  comments(filter: ModelCommentFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelCommentConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  projectTasksId: ID
}

type Comment {
  id: ID!
  task: Task
  content: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  taskCommentsId: ID
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelProjectConnection {
  items: [Project]!
  nextToken: String
}

input ModelProjectFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelProjectFilterInput]
  or: [ModelProjectFilterInput]
  not: ModelProjectFilterInput
}

type Query {
  getProject(id: ID!): Project
  listProjects(filter: ModelProjectFilterInput, limit: Int, nextToken: String): ModelProjectConnection
  getTask(id: ID!): Task
  listTasks(filter: ModelTaskFilterInput, limit: Int, nextToken: String): ModelTaskConnection
  getComment(id: ID!): Comment
  listComments(filter: ModelCommentFilterInput, limit: Int, nextToken: String): ModelCommentConnection
}

input ModelProjectConditionInput {
  name: ModelStringInput
  and: [ModelProjectConditionInput]
  or: [ModelProjectConditionInput]
  not: ModelProjectConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreateProjectInput {
  id: ID
  name: String!
}

input UpdateProjectInput {
  id: ID!
  name: String
}

input DeleteProjectInput {
  id: ID!
}

type Mutation {
  createProject(input: CreateProjectInput!, condition: ModelProjectConditionInput): Project
  updateProject(input: UpdateProjectInput!, condition: ModelProjectConditionInput): Project
  deleteProject(input: DeleteProjectInput!, condition: ModelProjectConditionInput): Project
  createTask(input: CreateTaskInput!, condition: ModelTaskConditionInput): Task
  updateTask(input: UpdateTaskInput!, condition: ModelTaskConditionInput): Task
  deleteTask(input: DeleteTaskInput!, condition: ModelTaskConditionInput): Task
  createComment(input: CreateCommentInput!, condition: ModelCommentConditionInput): Comment
  updateComment(input: UpdateCommentInput!, condition: ModelCommentConditionInput): Comment
  deleteComment(input: DeleteCommentInput!, condition: ModelCommentConditionInput): Comment
}

input ModelSubscriptionProjectFilterInput {
  id: ModelSubscriptionIDInput
  name: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionProjectFilterInput]
  or: [ModelSubscriptionProjectFilterInput]
  projectTasksId: ModelSubscriptionIDInput
}

type Subscription {
  onCreateProject(filter: ModelSubscriptionProjectFilterInput): Project @aws_subscribe(mutations: ["createProject"])
  onUpdateProject(filter: ModelSubscriptionProjectFilterInput): Project @aws_subscribe(mutations: ["updateProject"])
  onDeleteProject(filter: ModelSubscriptionProjectFilterInput): Project @aws_subscribe(mutations: ["deleteProject"])
  onCreateTask(filter: ModelSubscriptionTaskFilterInput): Task @aws_subscribe(mutations: ["createTask"])
  onUpdateTask(filter: ModelSubscriptionTaskFilterInput): Task @aws_subscribe(mutations: ["updateTask"])
  onDeleteTask(filter: ModelSubscriptionTaskFilterInput): Task @aws_subscribe(mutations: ["deleteTask"])
  onCreateComment(filter: ModelSubscriptionCommentFilterInput): Comment @aws_subscribe(mutations: ["createComment"])
  onUpdateComment(filter: ModelSubscriptionCommentFilterInput): Comment @aws_subscribe(mutations: ["updateComment"])
  onDeleteComment(filter: ModelSubscriptionCommentFilterInput): Comment @aws_subscribe(mutations: ["deleteComment"])
}

type ModelTaskConnection {
  items: [Task]!
  nextToken: String
}

input ModelTaskFilterInput {
  id: ModelIDInput
  title: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelTaskFilterInput]
  or: [ModelTaskFilterInput]
  not: ModelTaskFilterInput
  projectTasksId: ModelIDInput
}

input ModelTaskConditionInput {
  title: ModelStringInput
  and: [ModelTaskConditionInput]
  or: [ModelTaskConditionInput]
  not: ModelTaskConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  projectTasksId: ModelIDInput
}

input CreateTaskInput {
  id: ID
  title: String!
  projectTasksId: ID
}

input UpdateTaskInput {
  id: ID!
  title: String
  projectTasksId: ID
}

input DeleteTaskInput {
  id: ID!
}

input ModelSubscriptionTaskFilterInput {
  id: ModelSubscriptionIDInput
  title: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionTaskFilterInput]
  or: [ModelSubscriptionTaskFilterInput]
  taskCommentsId: ModelSubscriptionIDInput
}

type ModelCommentConnection {
  items: [Comment]!
  nextToken: String
}

input ModelCommentFilterInput {
  id: ModelIDInput
  content: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelCommentFilterInput]
  or: [ModelCommentFilterInput]
  not: ModelCommentFilterInput
  taskCommentsId: ModelIDInput
}

input ModelCommentConditionInput {
  content: ModelStringInput
  and: [ModelCommentConditionInput]
  or: [ModelCommentConditionInput]
  not: ModelCommentConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  taskCommentsId: ModelIDInput
}

input CreateCommentInput {
  id: ID
  content: String!
  taskCommentsId: ID
}

input UpdateCommentInput {
  id: ID!
  content: String
  taskCommentsId: ID
}

input DeleteCommentInput {
  id: ID!
}

input ModelSubscriptionCommentFilterInput {
  id: ModelSubscriptionIDInput
  content: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionCommentFilterInput]
  or: [ModelSubscriptionCommentFilterInput]
}
